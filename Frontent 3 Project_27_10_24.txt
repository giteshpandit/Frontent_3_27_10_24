<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Restaurant Website</title>
    <style>
        /* Add some basic styling for the menu display */
        #menu { display: flex; flex-direction: column; align-items: center; }
        .menu-item { padding: 10px; border: 1px solid #ddd; margin: 5px; }
    </style>
</head>
<body onload="getMenu()">
    <h1>Welcome to Our Restaurant</h1>
    <div id="menu"></div>
    <button onclick="placeOrder()">Place Order</button>

    <script>
        // Fetch the menu items from the JSON and display them
        async function getMenu() {
            try {
                const response = await fetch("https://raw.githubusercontent.com/saksham-accio/f2_contest_3/main/food.json");
                const menuItems = await response.json();
                const menuDiv = document.getElementById('menu');
                menuItems.forEach(item => {
                    const menuItemDiv = document.createElement('div');
                    menuItemDiv.classList.add('menu-item');
                    menuItemDiv.innerHTML = `${item.name} - $${item.price}`;
                    menuDiv.appendChild(menuItemDiv);
                });
            } catch (error) {
                console.error("Failed to load menu:", error);
            }
        }

        // Simulate the user placing an order and choose 3 random burgers
        function takeOrder() {
            return new Promise((resolve) => {
                setTimeout(() => {
                    const burgers = ["Cheese Burger", "Veggie Burger", "Chicken Burger", "Beef Burger"];
                    const order = [];
                    for (let i = 0; i < 3; i++) {
                        const randomBurger = burgers[Math.floor(Math.random() * burgers.length)];
                        order.push(randomBurger);
                    }
                    resolve({ order });
                }, 2500);
            });
        }

        // Simulate order preparation
        function orderPrep() {
            return new Promise((resolve) => {
                setTimeout(() => {
                    resolve({ order_status: true, paid: false });
                }, 1500);
            });
        }

        // Simulate payment
        function payOrder() {
            return new Promise((resolve) => {
                setTimeout(() => {
                    resolve({ order_status: true, paid: true });
                }, 1000);
            });
        }

        // Display thank-you message after payment is confirmed
        function thankyouFnc() {
            alert("Thank you for eating with us today!");
        }

        // Chain all promises in sequence
        async function placeOrder() {
            try {
                const order = await takeOrder();
                console.log("Order taken:", order);

                const prepStatus = await orderPrep();
                console.log("Order prepared:", prepStatus);

                const paymentStatus = await payOrder();
                console.log("Order paid:", paymentStatus);

                if (paymentStatus.paid) {
                    thankyouFnc();
                }
            } catch (error) {
                console.error("Error in order process:", error);
            }
        }
    </script>
</body>
</html>
